// Generated by Grats. Do not edit manually.
import { count as queryCountResolver } from "./modules\\api-tester";
import { error as queryErrorResolver } from "./modules\\api-tester";
import { isLikedByUser as postIsLikedByUserResolver } from "./modules\\feed\\model";
import { likes as postLikesResolver } from "./modules\\feed\\model";
import { user as postUserResolver } from "./modules\\feed\\model";
import { feed as queryFeedResolver } from "./modules\\feed\\model";
import { greeting as queryGreetingResolver } from "./modules\\api-tester";
import { post as queryPostResolver } from "./modules\\feed\\model";
import { user as queryUserResolver } from "./modules\\user\\model";
import { increaseCount as mutationIncreaseCountResolver } from "./modules\\api-tester";
import { mutationError as mutationMutationErrorResolver } from "./modules\\api-tester";
import { setPostLiked as mutationSetPostLikedResolver } from "./modules\\feed\\model";
import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLInt, GraphQLList, GraphQLBoolean, GraphQLString, GraphQLID } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                avatarUrl: {
                    name: "avatarUrl",
                    type: new GraphQLNonNull(GraphQLString)
                },
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                userId: {
                    name: "userId",
                    type: new GraphQLNonNull(GraphQLID)
                }
            };
        }
    });
    const PostType: GraphQLObjectType = new GraphQLObjectType({
        name: "Post",
        fields() {
            return {
                isLikedByUser: {
                    name: "isLikedByUser",
                    type: new GraphQLNonNull(GraphQLBoolean),
                    resolve(source, args, context) {
                        return postIsLikedByUserResolver(source, args, context);
                    }
                },
                likes: {
                    name: "likes",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source, args, context) {
                        return postLikesResolver(source, args, context);
                    }
                },
                message: {
                    name: "message",
                    type: new GraphQLNonNull(GraphQLString)
                },
                postId: {
                    name: "postId",
                    type: new GraphQLNonNull(GraphQLID)
                },
                user: {
                    name: "user",
                    type: new GraphQLNonNull(UserType),
                    resolve(source, args, context) {
                        return postUserResolver(source, args, context);
                    }
                },
                userId: {
                    name: "userId",
                    type: new GraphQLNonNull(GraphQLID)
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                count: {
                    name: "count",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source, args, context) {
                        return queryCountResolver(source, args, context);
                    }
                },
                error: {
                    name: "error",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source) {
                        return queryErrorResolver(source);
                    }
                },
                feed: {
                    name: "feed",
                    type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(PostType))),
                    resolve(source, args, context) {
                        return queryFeedResolver(source, args, context);
                    }
                },
                greeting: {
                    name: "greeting",
                    type: new GraphQLNonNull(GraphQLString),
                    args: {
                        name: {
                            name: "name",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args) {
                        return queryGreetingResolver(source, args);
                    }
                },
                post: {
                    name: "post",
                    type: new GraphQLNonNull(PostType),
                    args: {
                        postId: {
                            name: "postId",
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(source, args, context) {
                        return queryPostResolver(source, args, context);
                    }
                },
                user: {
                    name: "user",
                    type: new GraphQLNonNull(UserType),
                    args: {
                        userId: {
                            name: "userId",
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(source, args, context) {
                        return queryUserResolver(source, args, context);
                    }
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                increaseCount: {
                    name: "increaseCount",
                    type: new GraphQLNonNull(GraphQLInt),
                    args: {
                        amount: {
                            name: "amount",
                            type: new GraphQLNonNull(GraphQLInt)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationIncreaseCountResolver(source, args, context);
                    }
                },
                mutationError: {
                    name: "mutationError",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source) {
                        return mutationMutationErrorResolver(source);
                    }
                },
                setPostLiked: {
                    name: "setPostLiked",
                    type: new GraphQLNonNull(GraphQLInt),
                    args: {
                        liked: {
                            name: "liked",
                            type: new GraphQLNonNull(GraphQLBoolean)
                        },
                        postId: {
                            name: "postId",
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationSetPostLikedResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [MutationType, PostType, QueryType, UserType]
    });
}
