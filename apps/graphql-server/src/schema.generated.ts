// Generated by Grats. Do not edit manually.
import { count as queryCountResolver } from "./modules/api-tester";
import { files as folderFilesResolver } from "./modules/file";
import { dir as queryDirResolver } from "./modules/file";
import { error as queryErrorResolver } from "./modules/api-tester";
import { greeting as queryGreetingResolver } from "./modules/api-tester";
import { increaseCount as mutationIncreaseCountResolver } from "./modules/api-tester";
import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLInt, GraphQLList, GraphQLUnionType, GraphQLID, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const FolderType: GraphQLObjectType = new GraphQLObjectType({
        name: "Folder",
        fields() {
            return {
                files: {
                    name: "files",
                    type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(FileType))),
                    resolve(source) {
                        return folderFilesResolver(source);
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID)
                },
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                parentId: {
                    name: "parentId",
                    type: new GraphQLNonNull(GraphQLID)
                }
            };
        }
    });
    const TextFileType: GraphQLObjectType = new GraphQLObjectType({
        name: "TextFile",
        fields() {
            return {
                content: {
                    name: "content",
                    type: new GraphQLNonNull(GraphQLString)
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID)
                },
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                parentId: {
                    name: "parentId",
                    type: new GraphQLNonNull(GraphQLID)
                }
            };
        }
    });
    const FileType: GraphQLUnionType = new GraphQLUnionType({
        name: "File",
        types() {
            return [FolderType, TextFileType];
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                count: {
                    name: "count",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source) {
                        return queryCountResolver(source);
                    }
                },
                dir: {
                    name: "dir",
                    type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(FileType))),
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(source, args) {
                        return queryDirResolver(source, args);
                    }
                },
                error: {
                    name: "error",
                    type: new GraphQLNonNull(GraphQLInt),
                    resolve(source) {
                        return queryErrorResolver(source);
                    }
                },
                greeting: {
                    name: "greeting",
                    type: new GraphQLNonNull(GraphQLString),
                    args: {
                        name: {
                            name: "name",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args) {
                        return queryGreetingResolver(source, args);
                    }
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                increaseCount: {
                    name: "increaseCount",
                    type: new GraphQLNonNull(GraphQLInt),
                    args: {
                        amount: {
                            name: "amount",
                            type: new GraphQLNonNull(GraphQLInt)
                        }
                    },
                    resolve(source, args) {
                        return mutationIncreaseCountResolver(source, args);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [FileType, FolderType, MutationType, QueryType, TextFileType]
    });
}
